;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 4/30/2017
;Author  : Amin
;Company : Microsoft
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;int ball_x=7,ball_y=2,player1_y=0,player2_y=0;
;int player1_score=0,player2_score=0;
;int bool_x=1,bool_y=1;

	.DSEG
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0023 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0024 // Place your code here
; 0000 0025     if(PINC.0==0 && player1_y!=3){
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0026       player1_y++;}
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0027       else{
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0028    if(player1_y!=0)
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0029        player1_y--;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002A        }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002B 
; 0000 002C }
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0030 {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0031 // Place your code here
; 0000 0032 if(PIND.4==0 && player2_y!=3)
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0033         player2_y++;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0034    else{
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0035    if(player2_y!=0)
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0036        player2_y--;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0037        }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0038 
; 0000 0039 }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;
;// Declare your global variables here
;void print(int a){
; 0000 003C void print(int a){
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 003D 
; 0000 003E           switch(a){
;PCODE: $00000047 VOL: 0
;	a -> Y+0
;PCODE: $00000048 VOL: 0
; 0000 003F                 case 0:{
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0040                 PORTB=0x3F;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0041                 }
; 0000 0042                 break;
;PCODE: $0000004D VOL: 0
; 0000 0043                 case 1:{
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0044                 PORTB=0x06;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0045                 }
; 0000 0046                 break;
;PCODE: $00000053 VOL: 0
; 0000 0047                 case 2:
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0048                 {
; 0000 0049                 PORTB=0x5B;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 004A                 }
; 0000 004B                 break;
;PCODE: $00000059 VOL: 0
; 0000 004C                 case 3:
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004D                 {
; 0000 004E                 PORTB=0x4F;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 004F 
; 0000 0050                 }
; 0000 0051                 break;
;PCODE: $0000005F VOL: 0
; 0000 0052                 case 4:
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0053                 {
; 0000 0054                 PORTB=0x066;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0055 
; 0000 0056                 }
; 0000 0057                 break;
;PCODE: $00000065 VOL: 0
; 0000 0058                 case 5:
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0059                 {
; 0000 005A                 PORTB=0x6d;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 005B 
; 0000 005C                 }
; 0000 005D                 break;
;PCODE: $0000006B VOL: 0
; 0000 005E                 case 6:
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 005F                 {
; 0000 0060                 PORTB=0x7d;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0061 
; 0000 0062                 }
; 0000 0063                 break;
;PCODE: $00000071 VOL: 0
; 0000 0064                 case 7:
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0065                 {
; 0000 0066                 PORTB=0x07;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0067 
; 0000 0068                 }
; 0000 0069                 break;
;PCODE: $00000077 VOL: 0
; 0000 006A                 case 8:
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 006B                 {
; 0000 006C                 PORTB=0x7f;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 006D 
; 0000 006E                 }
; 0000 006F                 break;
;PCODE: $0000007D VOL: 0
; 0000 0070                 case 9:
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0071                 {
; 0000 0072                 PORTB=0x6f;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0073                 }
; 0000 0074                 break;
;PCODE: $00000083 VOL: 0
; 0000 0075           }
;PCODE: $00000084 VOL: 0
; 0000 0076        }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;
;void main(void)
; 0000 0079 {
;PCODE: $00000088 VOL: 0
; 0000 007A // Declare your local variables here
; 0000 007B 
; 0000 007C // Input/Output Ports initialization
; 0000 007D // Port A initialization
; 0000 007E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 007F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0080 PORTA=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0081 DDRA=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0082 
; 0000 0083 // Port B initialization
; 0000 0084 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0085 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0086 PORTB=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0087 DDRB=0xff;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0088 
; 0000 0089 // Port C initialization
; 0000 008A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 008B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 008C PORTC=0xff;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 008D DDRC=0xc0;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 008E 
; 0000 008F // Port D initialization
; 0000 0090 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0091 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0092 PORTD=0xff;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0093 DDRD=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0094 
; 0000 0095 // Timer/Counter 0 initialization
; 0000 0096 // Clock source: System Clock
; 0000 0097 // Clock value: Timer 0 Stopped
; 0000 0098 // Mode: Normal top=0xFF
; 0000 0099 // OC0 output: Disconnected
; 0000 009A TCCR0=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 009B TCNT0=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 009C OCR0=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 009D 
; 0000 009E // Timer/Counter 1 initialization
; 0000 009F // Clock source: System Clock
; 0000 00A0 // Clock value: Timer1 Stopped
; 0000 00A1 // Mode: Normal top=0xFFFF
; 0000 00A2 // OC1A output: Discon.
; 0000 00A3 // OC1B output: Discon.
; 0000 00A4 // Noise Canceler: Off
; 0000 00A5 // Input Capture on Falling Edge
; 0000 00A6 // Timer1 Overflow Interrupt: Off
; 0000 00A7 // Input Capture Interrupt: Off
; 0000 00A8 // Compare A Match Interrupt: Off
; 0000 00A9 // Compare B Match Interrupt: Off
; 0000 00AA TCCR1A=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00AB TCCR1B=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00AC TCNT1H=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00AD TCNT1L=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00AE ICR1H=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00AF ICR1L=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00B0 OCR1AH=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00B1 OCR1AL=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00B2 OCR1BH=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00B3 OCR1BL=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00B4 
; 0000 00B5 // Timer/Counter 2 initialization
; 0000 00B6 // Clock source: System Clock
; 0000 00B7 // Clock value: Timer2 Stopped
; 0000 00B8 // Mode: Normal top=0xFF
; 0000 00B9 // OC2 output: Disconnected
; 0000 00BA ASSR=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00BB TCCR2=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00BC TCNT2=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00BD OCR2=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00BE 
; 0000 00BF // External Interrupt(s) initialization
; 0000 00C0 // INT0: On
; 0000 00C1 // INT0 Mode: Rising Edge
; 0000 00C2 // INT1: On
; 0000 00C3 // INT1 Mode: Rising Edge
; 0000 00C4 // INT2: Off
; 0000 00C5 GICR|=0xC0;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00C6 MCUCR=0x0F;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00C7 MCUCSR=0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00C8 GIFR=0xC0;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00C9 
; 0000 00CA // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00CB TIMSK=0x00;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00CC 
; 0000 00CD // USART initialization
; 0000 00CE // USART disabled
; 0000 00CF UCSRB=0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00D0 
; 0000 00D1 // Analog Comparator initialization
; 0000 00D2 // Analog Comparator: Off
; 0000 00D3 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00D4 ACSR=0x80;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00D5 SFIOR=0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00D6 
; 0000 00D7 // ADC initialization
; 0000 00D8 // ADC disabled
; 0000 00D9 ADCSRA=0x00;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00DA 
; 0000 00DB // SPI initialization
; 0000 00DC // SPI disabled
; 0000 00DD SPCR=0x00;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00DE 
; 0000 00DF // TWI initialization
; 0000 00E0 // TWI disabled
; 0000 00E1 TWCR=0x00;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00E2 
; 0000 00E3 // Alphanumeric LCD initialization
; 0000 00E4 // Connections are specified in the
; 0000 00E5 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00E6 // RS - PORTA Bit 0
; 0000 00E7 // RD - PORTA Bit 1
; 0000 00E8 // EN - PORTA Bit 2
; 0000 00E9 // D4 - PORTA Bit 4
; 0000 00EA // D5 - PORTA Bit 5
; 0000 00EB // D6 - PORTA Bit 6
; 0000 00EC // D7 - PORTA Bit 7
; 0000 00ED // Characters/line: 8
; 0000 00EE lcd_init(16);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00EF 
; 0000 00F0 // Global enable interrupts
; 0000 00F1 #asm("sei")
;PCODE: $000000D4 VOL: 0
	sei
;PCODE: $000000D5 VOL: 0
; 0000 00F2 
; 0000 00F3 while (1)
;PCODE: $000000D6 VOL: 0
; 0000 00F4       {
; 0000 00F5       PIND.6=0;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00F6       print(player1_score);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00F7       delay_ms(100);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00F8       PIND.7=0;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00F9       print(player2_score);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00FA 
; 0000 00FB       lcd_gotoxy(ball_x,ball_y);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00FC           lcd_puts("*");
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00FD           lcd_gotoxy(0,player1_y);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00FE           lcd_puts("]");
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00FF           lcd_gotoxy(15,player2_y);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0100           lcd_puts("[");
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0101           delay_ms(100);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0102           if(bool_x==1){
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0103           ball_x++;}
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0104           if(bool_x==0){
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0105           ball_x--;}
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0106           if(bool_y==1){
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0107           ball_y++;}
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0108           if(bool_y==0){
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0109           ball_y--;}
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 010A           ////////////////////////
; 0000 010B           if(ball_y==3)
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 010C             bool_y=0;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 010D           if(ball_y==0)
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 010E             bool_y=1;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 010F           if(ball_x==1){
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0110             bool_x=1;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0111           if(player1_y!=ball_y){
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0112             player1_y=0;
;PCODE: $0000012A VOL: 0
; 0000 0113             player2_y=0;
;PCODE: $0000012B VOL: 0
; 0000 0114             ball_x=7;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0115             ball_y=2;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0116             bool_x=1;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0117             bool_y=1;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0118             player2_score++;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0119             lcd_clear();
;PCODE: $00000139 VOL: 0
; 0000 011A             lcd_puts("player 2 wins");
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 011B             delay_ms(100);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 011C           }
; 0000 011D           }
;PCODE: $00000140 VOL: 0
; 0000 011E           if(ball_x==14){
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 011F             bool_x=0;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0120           if(player2_y!=ball_y){
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0121             player1_y=0;
;PCODE: $0000014A VOL: 0
; 0000 0122             player2_y=0;
;PCODE: $0000014B VOL: 0
; 0000 0123             ball_x=7;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0124             ball_y=2;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0125             bool_x=1;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0126             bool_y=1;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0127             player1_score++;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0128             lcd_clear();
;PCODE: $00000157 VOL: 0
; 0000 0129             lcd_puts("player 1 wins");
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 012A             delay_ms(100);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 012B           }
; 0000 012C           }
;PCODE: $0000015E VOL: 0
; 0000 012D           lcd_clear();
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 012E       }
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 012F 
; 0000 0130 
; 0000 0131 }
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0

	.DSEG
_0x23:
	.BYTE 0x22
